{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Introduction and Growth Rates\"\n",
        "author: \"Paulo Fagandini, PhD\"\n",
        "institute: \"Lisbon Accounting and Business School – Polytechnic University of Lisbon\"\n",
        "format:\n",
        "  revealjs:\n",
        "    theme: default\n",
        "    slide-number: false\n",
        "    incremental: true\n",
        "    math: katex\n",
        "    transition: slide\n",
        "    footer: \"Statistics I\"\n",
        "    from: markdown+emoji\n",
        "    code-overflow: wrap\n",
        "    code-block-font-size: 0.75em\n",
        "    progress: true\n",
        "jupyter: python3\n",
        "---\n",
        "\n",
        "# Course Introduction\n",
        "\n",
        "## Core Information\n",
        "\n",
        "**Instructor:** Paulo Fagandini\n",
        "\n",
        ":email: pfagandini@iscal.ipl.pt\n",
        "\n",
        "\\\n",
        "\n",
        "**Main source for course material:** Moodle@ISCAL\n",
        "\n",
        "**Alternative source (EN):** [My personal website](https://pfagandini.github.io/statistics1.html)\n",
        "\n",
        "\\\n",
        "\n",
        "**Official communication channel:** :email: Institutional Email\n",
        "\n",
        "## Bibliography\n",
        "\n",
        "### Topic 1:\n",
        ":book: A Practical Introduction to Index Numbers. 1^st^ Ed 2015. Jeff Ralph, Rob O'Neill, Joe Winton.\n",
        "\n",
        "### Topics 2 and 3:\n",
        ":book: Statistics for Business and Economics Global Edition. 10^th^ Ed 2022. Paul Newbold, William Carlson, and Betty Thorne.\n",
        "\n",
        "\\\n",
        "\n",
        "<small>This last book is a bit expensive, but it can be rented for less money [here](https://eu.pearson.com/statistics-for-business-and-economics-global-edition/9781292438306). The Publisher kindly offered a 25% discount with the code **MISLIBROS2025**. This code is valid for the whole site until December 31^st^ , 2025.</small>\n",
        "\n",
        "## Continuous Assessment\n",
        "\n",
        "| Assessment Element | Weight (%) | Duration | Syllabus | Date |\n",
        "|-------------------| ------------| ---------| -------- | ---- |\n",
        "| Midterm | 60% | 80 minutes| Topics 1 and 2 | Week Nov 11-15  |\n",
        "| Partial Exam | 40% | 80 minutes | Topic 3| Regular Exam Date |\n",
        "\n",
        "<small>Each test has a minimum grade of 7.00 (out of 20), not 6.9, not 6.95.</small>\n",
        "\n",
        "## Comprehensive Exam\n",
        "\n",
        "Students may opt, on the day of the Exam, to take an Exam worth 100% of the grade. This Exam will cover Topics 1, 2, and 3.\n",
        "\n",
        "\\\n",
        "\n",
        "If you score less than 7.00 in the Midterm, or if you cannot attend the midterm for whatever reason, you **will** have to do the Comprehensive Exam.\n",
        "\n",
        "# Growth Rates\n",
        "\n",
        "## Example"
      ],
      "id": "b2bb33c2"
    },
    {
      "cell_type": "code",
      "metadata": {
        "fig-width": 16,
        "fig-height": 8
      },
      "source": [
        "#| echo: false\n",
        "\n",
        "import pandas_datareader.data as web\n",
        "import matplotlib.pyplot as plt\n",
        "import pandas as pd\n",
        "from datetime import datetime, timedelta\n",
        "from IPython.display import Markdown\n",
        "\n",
        "# Set up date range for last 10 years\n",
        "end_date = datetime.now()\n",
        "start_date = end_date - timedelta(days=365*6)\n",
        "\n",
        "# Get Italian GDP data from FRED\n",
        "italy_gdp = web.DataReader('CLVMNACSCAB1GQIT', 'fred', start_date, end_date)\n",
        "\n",
        "# Convert to annual data\n",
        "annual_gdp = italy_gdp.resample('Y').last()\n",
        "annual_gdp.index = annual_gdp.index.year"
      ],
      "id": "549d3994",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::columns\n",
        ":::{.column width=\"50%\"}\n",
        "\n",
        "Italian Real GDP (base = 2010)"
      ],
      "id": "0ed2f21a"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "# Create DataFrame for table\n",
        "gdp_table = pd.DataFrame({\n",
        "    'Year': annual_gdp.index,\n",
        "    'GDP (Millions €)': annual_gdp.iloc[:, 0].round(0).astype(int)\n",
        "})\n",
        "\n",
        "gdp_table['GDP (Millions €)'] = gdp_table['GDP (Millions €)'].apply(lambda x: f\"{x:,.0f}\")\n",
        "markdown_table = gdp_table.to_markdown(index = False, stralign = \"left\", numalign = \"right\")\n",
        "Markdown(markdown_table)"
      ],
      "id": "61c15257",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Source: FRED\n",
        "\n",
        ":::\n",
        "\n",
        ":::{.column width=\"50%\"}"
      ],
      "id": "3f5576e8"
    },
    {
      "cell_type": "code",
      "metadata": {
        "fig-width": 5,
        "fig-height": 3
      },
      "source": [
        "#| echo: false\n",
        "\n",
        "plt.figure(figsize = (5, 3))\n",
        "plt.plot(annual_gdp.index, annual_gdp.iloc[:, 0], \n",
        "         marker = 'o', linewidth = 3, markersize = 8, color = '#4472C4')\n",
        "\n",
        "plt.title('GDP', fontsize = 16, fontweight = 'bold')\n",
        "plt.xlabel('Year', fontsize = 12)\n",
        "plt.ylabel('GDP (Millions of Euros)', fontsize = 12)\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "9cccfeff",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        ":::"
      ],
      "id": "1fb87be8"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# putting the dataset in usable variables for practicality\n",
        "\n",
        "def d(x):\n",
        "  display(Markdown(x))\n",
        "\n",
        "y = []\n",
        "ys = []\n",
        "v = []\n",
        "vs = []\n",
        "\n",
        "for i in range(5):\n",
        "  y.append(annual_gdp.index[i])\n",
        "  ys.append(f\"{y[i]:.0f}\")\n",
        "\n",
        "  v.append(round(annual_gdp.iloc[i,0]))\n",
        "  vs.append(f\"{v[i]:,.0f}\")"
      ],
      "id": "3e04c64f",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Example\n",
        "\n",
        "Let the GDP for Italy be represented by the variable $y_t$, so $y_{`{python} ys[0]`}$ is the GDP we got for `{python} ys[0]` (*i.e.* `{python} vs[0]`).\n",
        "\n",
        "How much did $y$ grow between `{python} ys[0]` and `{python} ys[1]`? \n",
        "\n",
        ". . .\n",
        "\n",
        "$$\\Delta y_{`{python} ys[1]`} = y_{`{python} ys[1]`} - y_{`{python} ys[0]`} = `{python} vs[1]` - `{python} vs[0]`$$\n",
        "\n",
        ". . ."
      ],
      "id": "020e3956"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "d(f'$$={v[1]-v[0]}$$')"
      ],
      "id": "067c08fb",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ". . .\n",
        "\n",
        "Or we could say"
      ],
      "id": "c2b40fe1"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "d(f\"$$y_{{{y[1]}}}=y_{{{y[0]}}}+\\\\Delta y_{{{y[1]}}}$$\")\n",
        "d(f'$${v[1]}={v[0]}+({v[1]-v[0]})$$')"
      ],
      "id": "4d53b5f5",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Example"
      ],
      "id": "cf356f09"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "d(f\"$$y_{{{y[1]}}}=y_{{{y[0]}}}+\\\\Delta y_{{{y[1]}}}$$\")\n",
        "d(f\"$$y_{{{y[1]}}}=y_{{{y[0]}}}\\left(1+\\\\frac{{\\\\Delta y_{{{y[1]}}}}}{{y_{{{y[0]}}}}}\\\\right)$$\")\n",
        "d(f\"$$y_{{{y[1]}}}=y_{{{y[0]}}}\\left(1+\\\\delta^y_{{{y[1]}}}\\\\right)$$\")"
      ],
      "id": "82e6abb1",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "This, $\\delta_{2020}^y$, is the **growth rate** of $y$ at year `{python} ys[1]`.\n",
        "\n",
        "## Growth Rate\n",
        "\n",
        "::: {.callout-note appearance=\"simple\" icon=false}\n",
        "## Growth Rate\n",
        "Let $y_t$ be a variable that might take different values over time. The **growth rate** at $t$ is given by $\\delta_t^y$, and takes a value such that:\n",
        "$$y_t=y_{t-1}\\left(1+\\delta_t\\right)$$\n",
        "\n",
        "And then\n",
        "$$\\delta_t = \\frac{y_t-y_{t-1}}{y_{t-1}}$$\n",
        "\n",
        "<small>Note: I dropped $y$ from the notation in the formula because it is obvious that we are talking about the variable $y$.</small>\n",
        "\n",
        "You can write the growth rate as a decimal or as a percentage. If you use decimal notation, consider at least 4 places, if you use percentage you use at least 2. Example: 0.0123 or 1.23\\%.\n",
        "\n",
        "**Interpretation**: What is the percentage change for the variable $y$ between $t-1$ and $t$.\n",
        ":::\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "## Example"
      ],
      "id": "bee4f753"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "d(f'$${v[1]}={v[0]}+({v[1]-v[0]})$$')\n",
        "d(f'$${v[1]}={v[0]}\\left(1+\\\\frac{({v[1]-v[0]})}{{{v[0]}}}\\\\right)$$')\n",
        "d(f'$${v[1]}={v[0]}\\left(1+{{{round((v[1]-v[0])/v[0], 4)}}}\\\\right)$$')"
      ],
      "id": "6606772a",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ". . .\n",
        "\n",
        "In this case $\\delta_{`{python} ys[1]`}^y = `{python} round((v[1]-v[0])/v[0], 4)` = `{python} 100*round((v[1]-v[0])/v[0], 4)`\\%$.\n",
        "\n",
        "> Interpretation: Between `{python} ys[0]` and `{python} ys[1]`, the GDP for Italy *`{python} 'decreased' if v[1]-v[0]<0 else 'increased'`* `{python} abs(100*round((v[1]-v[0])/v[0], 4))`\\%.\n",
        "\n",
        "## Growth Rates\n",
        "\n",
        "More generally $$\\delta_{t+k|t}=\\frac{y_{t+k}-y_t}{y_t}$$\n",
        "\n",
        "Or $$y_{t+k}=y_t(1+\\delta_{t+k|t})$$\n",
        "\n",
        "<small>(homework: Show step by step how you go from one to the other.)</small>\n",
        "\n",
        "> Note: In this case $\\delta_{t+k|t}$ is what percentage the variable changed from $t$ to $t+k$, and $k$ is the number of periods.\n",
        "\n",
        "## Example\n",
        "\n",
        "We had $y_{`{python} ys[0]`}=`{python} vs[0]`$, and $y_{`{python} ys[4]`} = `{python} vs[4]`$. We will try to find $\\delta_{`{python} ys[4]`|`{python} ys[0]`}^y$.\n",
        "\n",
        "* What is the value of $k$ in this case?\n",
        "\n",
        ". . .\n",
        "\n",
        "  $$k=`{python} ys[4]`-`{python} ys[0]`=`{python} f'{y[4]-y[0]}'`$$\n",
        "\n",
        "* What is the growth rate between $`{python} ys[0]`$ and $`{python} ys[4]`$ ?\n",
        "\n",
        ". . .\n",
        "\n",
        "$$\\delta_{`{python} ys[4]`|`{python} ys[0]`}^y = \\frac{`{python} vs[4]` - `{python} vs[0]`}{`{python} vs[0]`} = `{python} round((v[4]-v[0])/v[0], 4)` = `{python} 100*round((v[4]-v[0])/v[0], 4)`\\%$$\n",
        "\n",
        "> In Italy, GDP grew `{python} 100*round((v[4]-v[0])/v[0], 4)`\\% between `{python} ys[0]` and `{python} ys[4]`, or GDP in Italy in `{python} ys[4]` is `{python} 100*round((v[4]-v[0])/v[0], 4)`\\% larger than in `{python} ys[0]`.\n",
        "\n",
        "## Growth Rates\n",
        "\n",
        "::: {.callout-warning}\n",
        "\n",
        "You should be careful with your interpretation and use of this *cumulative* growth rate, because it **does not** mean that $y$ grew $\\delta_{t+k|t}^y$ **per period** between $t$ and $t+k$.\n",
        "\n",
        ":::\n",
        "\n",
        ". . .\n",
        "\n",
        "\\\n",
        "\n",
        "::: {.callout-note appearance=\"simple\" icon=false}\n",
        "## Average Growth Rate\n",
        "Let $y_t$ be a variable that might take different values over time. The **average growth rate** betweek $t$ and $t+k$ is given by $\\overline{\\delta}_{t+k|t}^y$, and takes a value such that:\n",
        "$$y_{t+k}=y_t\\left(1+\\overline{\\delta}_{t+k|t}\\right)^k$$\n",
        "\n",
        "<small>I dropped $y$ from the notation in the formula because it is obvious that we are talking about the variable $y$.</small>\n",
        ":::\n",
        "\n",
        "## Growth Rates\n",
        "\n",
        "Let's start with $y_t$... and the traditional growth rates $\\delta_t$:\n",
        "$$y_{t+1} = y_t(1+\\delta_t)$$\n",
        "$$y_{t+2} = y_{t+1}(1+\\delta_{t+1})$$\n",
        "$$y_{t+3} = y_{t+1}(1+\\delta_{t+2})$$\n",
        "\n",
        "Can we write $y_{t+2}$ as a function of $y_t$?\n",
        "\n",
        ". . .\n",
        "\n",
        "$$y_{t+2} = y_{t+1}(1+\\delta_{t+1}) = y_{t}(1+\\delta_t)(1+\\delta_{t+1})$$\n",
        "\n",
        ". . . \n",
        "\n",
        "And $y_{t+3}$?\n",
        "\n",
        ". . . \n",
        "\n",
        "$$y_{t+3} = y_{t}(1+\\delta_t)(1+\\delta_{t+1})(1+\\delta_{t+2})$$\n",
        "\n",
        "## Growth Rates\n",
        "\n",
        "Generalizing\n",
        "\n",
        "$$y_{t+k}=y_t (1+\\delta_t)(1+\\delta_{t+1})...(1+\\delta_{t+k-1})$$\n",
        "\n",
        "When computing the average growth rate, we are trying to find $\\overline{\\delta}$ such that if the growth rate was the same every period, it would have taken $y_t$ to the value of $y_{t+k}$ all the same:\n",
        "\n",
        "$$y_{t+k}=y_t(1+\\overline{\\delta})(1+\\overline{\\delta})...(1+\\overline{\\delta})$$\n",
        "\n",
        ". . . \n",
        "\n",
        "How many times is $(1+\\overline{\\delta})$ multiplied in the expression?\n",
        "\n",
        "## Growth Rates\n",
        "\n",
        "$$y_{t+k} = y_t \\left(1+\\overline{\\delta}\\right)^k$$\n",
        "\n",
        ". . .\n",
        "\n",
        "$$\\frac{y_{t+k}}{y_t} = \\left(1+\\overline{\\delta}\\right)^k$$\n",
        "\n",
        ". . .\n",
        "\n",
        "$$\\left(\\frac{y_{t+k}}{y_t}\\right)^{1/k} = \\left(1+\\overline{\\delta}\\right)$$\n",
        "\n",
        ". . .\n",
        "\n",
        "$$\\left(\\frac{y_{t+k}}{y_t}\\right)^{1/k} - 1 = \\overline{\\delta}$$\n",
        "\n",
        "$$\\overline{\\delta}_{t+k|t}=\\left(\\frac{y_{t+k}}{y_t}\\right)^{1/k} - 1$$\n",
        "\n",
        "## Example\n",
        "\n",
        "We had $$\\delta_{`{python} ys[4]`|`{python} ys[0]`}^y = \\frac{`{python} vs[4]` - `{python} vs[0]`}{`{python} vs[0]`} = `{python} round((v[4]-v[0])/v[0], 4)` = `{python} 100*round((v[4]-v[0])/v[0], 4)`\\%$$\n",
        "\n",
        "But what now is the **average growth rate** between `{python} ys[0]` and `{python} ys[4]`?\n",
        "\n",
        ". . .\n",
        "\n",
        "Remember $k = `{python} f'{y[4]-y[0]}'`$!\n",
        "\n",
        "$$\\overline{\\delta} = \\left(\\frac{`{python} vs[4]`}{`{python} vs[0]`}\\right)^{1/`{python} f'{y[4]-y[0]}'`} - 1 \\approx `{python} float(round((v[4]/v[0])**(1/(y[4]-y[0]))-1,4))`=`{python} round(100*float((v[4]/v[0])**(1/(y[4]-y[0]))-1),2)`\\%$$\n",
        "\n",
        "\n",
        "> Interpretation: On average, between `{python} ys[0]` and `{python} ys[4]` $y$ `{python} 'grew' if y[4]>y[0] else 'decreased'` `{python} round(100*float((v[4]/v[0])**(1/(y[4]-y[0]))-1),2)`\\% every year.\n",
        "\n",
        "## Example\n",
        "\n",
        "Note that $$(1+`{python} round(100*float((v[4]/v[0])**(1/(y[4]-y[0]))-1),2)`\\%)^`{python} f'{y[4]-y[0]}'` = (1+`{python} float(round((v[4]/v[0])**(1/(y[4]-y[0]))-1,4))`)^`{python} f'{y[4]-y[0]}'` \\approx `{python} 1+round((v[4]-v[0])/v[0], 4)` \\approx 1 + `{python} round(100*(v[4]-v[0])/v[0], 2)`\\%$$\n",
        "\n",
        "\n",
        "# Index Numbers\n",
        "\n",
        "## Motivation"
      ],
      "id": "4237ea0d"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import yfinance as yf\n",
        "\n",
        "high_price_stock = \"NFLX\"  \n",
        "low_price_stock = \"AAPL\"   \n",
        "\n",
        "# Set up date range for last 10 years\n",
        "end_date = datetime.now()\n",
        "start_date = end_date - timedelta(days = 10*365)\n",
        "\n",
        "high_stock_prices = yf.download(high_price_stock, start = start_date, end = end_date)['Close']\n",
        "low_stock_prices = yf.download(low_price_stock, start = start_date, end = end_date)['Close']"
      ],
      "id": "5b59e304",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "\n",
        "plt.figure(figsize = (12, 7))\n",
        "    \n",
        "# Plot both stocks on the same y-axis (same scale)\n",
        "plt.plot(high_stock_prices.index, high_stock_prices.values, color = 'blue', linewidth = 3, label = f'{high_price_stock}')\n",
        "plt.plot(low_stock_prices.index, low_stock_prices.values, color = 'red', linewidth = 3, label = f'{low_price_stock}')\n",
        "\n",
        "# Add labels and formatting\n",
        "plt.xlabel('Date', fontsize = 12)\n",
        "plt.ylabel('Stock Price ($)', fontsize = 12)\n",
        "plt.title(f'{high_price_stock} vs {low_price_stock}', fontsize = 14, pad = 20)\n",
        "plt.legend(fontsize = 12)\n",
        "plt.grid(True, alpha = 0.3)\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "65cb48bb",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Which stock would you have purchased in `{python} start_date.year`?\n",
        "\n",
        "## Motivation\n",
        "\n",
        "What's the important question here?\n",
        "\n",
        ". . .\n",
        "\n",
        "Which one grew more! For this, levels are not as relevant as their evolution over time.\n",
        "\n",
        "For example, say we have prices for two stocks A and B. Say we want to hold these stocks for only one period, which one would choose to invest your hard earned :dollar:?\n",
        "\n",
        ". . .\n",
        "\n",
        "How many stocks will you be able to buy of each stock, if their prices are $a_t$ and $b_t$, and you have US$1000?\n",
        "\n",
        ". . .\n",
        "\n",
        "$n_a=\\frac{1000}{a_t}$ of stock A and $n_b=\\frac{1000}{b_t}$ of stock $B$. Note that $n_a$ and $n_b$ are the amount of stock you can buy of each.\n",
        "\n",
        "## Motivation\n",
        "\n",
        "Now is a new day :sunrise_over_mountains:! Prices are now $a_{t+1}$ and $b_{t+1}$, how much is your portfolio worth today?\n",
        "\n",
        ". . .\n",
        "\n",
        "1. If you bought stock A: $a_{t+1} n_a = a_{t+1}\\frac{1000}{a_t}$\n",
        "2. If you bought stock B: $b_{t+1} n_b = b_{t+1}\\frac{1000}{b_t}$\n",
        "\n",
        ". . .\n",
        "\n",
        "Note that the 1000 is fixed, so it is just what we invested, it is not going to change anything in our decision on buying A vs B, what is really important is $\\frac{a_{t+1}}{a_t}$ and $\\frac{b_{t+1}}{b_t}$, that is the growth rate of prices for each stock, as\n",
        "\n",
        "$$\\frac{a_{t+1}}{a_t}=1+\\delta_{t+1}^a \\quad\\text{and}\\quad \\frac{b_{t+1}}{b_t}=1+\\delta_{t+1}^b$$\n",
        "\n",
        "## Motivation\n",
        "\n",
        "You did not sell and...\n",
        "\n",
        "Now is (another) new day :sunrise_over_mountains:! Prices are now $a_{t+2}$ and $b_{t+2}$, how much is your portfolio worth today?\n",
        "\n",
        ". . .\n",
        "\n",
        "1. If you bought stock A: $a_{t+2} n_a = a_{t+2}\\frac{1000}{a_t}$\n",
        "2. If you bought stock B: $b_{t+2} n_b = b_{t+2}\\frac{1000}{b_t}$\n",
        "\n",
        ". . .\n",
        "\n",
        "blah, blah... \n",
        "\n",
        "$$\\frac{a_{t+2}}{a_t}=1+\\delta_{t+2}^a \\quad\\text{and}\\quad \\frac{b_{t+2}}{b_t}=1+\\delta_{t+2}^b$$\n",
        "\n",
        "If we wait two days, we only care how is the price today compared to when we made the purchase. We could make instead a plot of $1+\\delta_{t+k}$ to see which grew more!\n",
        "\n",
        "## Motivation"
      ],
      "id": "4e3008c2"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "\n",
        "high_p = high_stock_prices/high_stock_prices.iloc[0,0]\n",
        "low_p = low_stock_prices/low_stock_prices.iloc[0,0]\n",
        "\n",
        "plt.figure(figsize = (12, 5))\n",
        "    \n",
        "# Plot both stocks on the same y-axis (same scale)\n",
        "plt.plot(high_p.index, high_p.values, color = 'blue', linewidth = 3, label = f'{high_price_stock}')\n",
        "plt.plot(low_p.index, low_p.values, color = 'red', linewidth = 3, label = f'{low_price_stock}')\n",
        "\n",
        "# Add labels and formatting\n",
        "plt.xlabel('Date', fontsize = 12)\n",
        "plt.ylabel(f'Price Evolution Compared to {start_date.day}/{start_date.month}/{start_date.year}', fontsize = 12)\n",
        "plt.title(f'{high_price_stock} vs {low_price_stock}', fontsize = 14, pad = 20)\n",
        "plt.legend(fontsize = 12)\n",
        "plt.grid(True, alpha = 0.3)\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "8982a6df",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Now we have much clear picture. We can compare their evolution starting in `{python} f'{start_date.day}/{start_date.month}/{start_date.year}'`.\n",
        "\n",
        "\\\n",
        "\n",
        "What can you read from the plot?\n",
        "\n",
        "## Motivation\n",
        "\n",
        "Note that for `{python} f'{start_date.day}/{start_date.month}/{start_date.year}'`, we would have, for A and B:\n",
        "\n",
        "$$1+\\frac{a_t-a_t}{a_t}=1\\quad\\text{and}\\quad 1+\\frac{b_t-b_t}{b_t}=1$$\n",
        "\n",
        "We just built and index number!\n",
        "\n",
        "By convention though, instead of using 1 for the reference date, we will use 100 (as in 100\\%) for the reference day (we will put a name to this in a few moments).\n",
        "\n",
        "\\\n",
        "\n",
        "When our new series was 2, we understood that $1+\\delta_{t+k}=2$ or $\\delta_{t+k}=1$, *i.e.* the price grew 100\\%, or *doubled*! Now, with the new notation, we would have that the new series would take the value of 200, *i.e.* the price is now 200\\% the value it had at our initial date.\n",
        "\n",
        "## Index Numbers\n",
        "\n",
        "::: {.callout-note appearance=\"simple\" icon=false}\n",
        "## Index Number\n",
        "An **Index Number** is a scaled variable that takes as a reference point the value an underlying variable took at a fixed point in time. Say, for an underlying variable $x_t$ we build an index $I_t$.\n",
        "\n",
        "$$I_t=\\frac{x_t}{x_0}\\times 100$$\n",
        "\n",
        "Where $x_t$ is the value the underlying variable takes at time $t$, and $x_0$ representes the value this variable took at our reference point. This period is called **base**.\n",
        "\n",
        ">Note: In this case we used time as the dimension for $t$ but this needs not be the case, we will see examples later.\n",
        ":::\n",
        "\n",
        "\\\n",
        "\n",
        "In our previous example, the base day would have been `{python} f'{start_date.day}/{start_date.month}/{start_date.year}'`. Note that in the base period $$I_0=\\frac{x_0}{x_0}\\times 100 = 100$$\n",
        "\n",
        "## Index Numbers\n",
        "\n",
        "Index Numbers are defined by their underlying variable. This can change over time, or it can change according to another dimension, like geography, or both! We will see examples.\n",
        "\n",
        "Also, an Index Number can have a fixed base or a moving base.\n",
        "\n",
        "```{mermaid}\n",
        "flowchart TD\n",
        "  A[Index] --> B(Underlying Variable)\n",
        "  A --> C(Base)\n",
        "  A --> D(Dimension)\n",
        "\n",
        "  B --> E[Simple]\n",
        "  B --> F[Composite]\n",
        "\n",
        "  C --> G[Fixed]\n",
        "  C --> H[Rolling]\n",
        "\n",
        "  D --> I[Chronological]\n",
        "  D --> J[Geographical]\n",
        "  \n",
        "```\n",
        "\n",
        "* Simple and Composite are mutually exclusive\n",
        "* Fixed and Moving are mutually exclusive\n",
        "* Rolling always needs a chronological dimension\n",
        "\n",
        "## Examples\n",
        "\n",
        "| Type | Example |\n",
        "|------|---------|\n",
        "|Simple| Single stock price|\n",
        "|Composite| SP500 (market index), CPI|\n",
        "|Fixed Base| GDP, CPI, market index|\n",
        "|Rolling Base| Some measures of GDP, Commodities Futures|\n",
        "|Chronological | Stock price over time, CPI, GDP|\n",
        "|Geographical | BigMac Index |\n",
        "\n",
        "## Index Numbers\n",
        "\n",
        "Importantly, an index number is *no bueno* to reflect the level of a variable, but its evolution or relative value against a base.\n",
        "\n",
        "## Rolling Base\n",
        "\n",
        "::: {.callout-note appearance=\"simple\" icon=false}\n",
        "## Chain or Link Index\n",
        "A **Chain or Link Index Number** is an index number that updates its base in every period.\n",
        "\n",
        "$$I_t = \\frac{x_t}{x_{t-1}}\\times 100$$\n",
        "\n",
        ":::\n",
        "\n",
        "## Index Numbers\n",
        "\n",
        "Index numbers allow us to easily compute the growth rate between any two periods, just like we would do with the underlying variable:\n",
        "\n",
        "1. Simple Index Number\n",
        "\n",
        ". . .\n",
        "\n",
        "$$1+\\delta_{t+k,t}=\\frac{x_{t+k}}{x_t}=\\frac{x_{t+k}}{x_t}=\\frac{\\frac{x_{t+k}}{x_0}}{\\frac{x_t}{x_0}}=\\frac{I_{t+k}}{I_t}$$\n",
        "\n",
        "2. Chain Index Number\n",
        "\n",
        ". . .\n",
        "\n",
        "<small>\n",
        "$$1+\\delta_{t+k,t}=\\frac{x_{t+k}}{x_t}=\\frac{x_{t+k}}{x_{t+k-1}}\\frac{x_{t+k-1}}{x_{t}}=\\frac{x_{t+k}}{x_{t+k-1}}\\frac{x_{t+k-1}}{x_{t+k-2}}\\frac{x_{t+k-2}}{x_{t}}=\\frac{x_{t+k}}{x_{t+k-1}}\\frac{x_{t+k-1}}{x_{t+k-2}}...\\frac{x_{t+1}}{x_{t}}$$\n",
        "$$1+\\delta_{t+k,t}=I_{t+k}\\times I_{t+k-1}\\times ... \\times I_{t+2} \\times I_{t+1}$$\n",
        "</small>\n",
        "\n",
        "## Index Numbers\n",
        "\n",
        "\n",
        "::: {.callout-warning}\n",
        "## Do not use 100 index when multiplying chain or link indices, use the decimal notation.\n",
        "\n",
        "Note that if the underlying variable does not change at all, you should expect the same value, $x_t=x_{t+1}=x_{t+2}$\n",
        "\n",
        "In this case $I_{t+1}=\\frac{x_{t+1}}{x_t}=1$ and $I_{t+2}=\\frac{x_{t+2}}{x_{t+1}}=1$, and therefore $$1+\\delta_{t+2,t}=1\\times 1= 1$$\n",
        "This is the correct way to do it :white_check_mark:.\n",
        "\n",
        "But if instead you used the 100 to multiply: $$1+\\delta_{t+2,t}=100\\times 100= 10000$$ and we get that $x$ grew 100 times! (:x: because we know that $x_t=x_{t+1}=x_{t+2}$)\n",
        "\n",
        ":::\n",
        "\n",
        "## Index Numbers\n",
        "\n",
        "We can always transform a chain index number into a fixed base index number.\n",
        "\n",
        "1. Chose a reference, say $t$.\n",
        "2. "
      ],
      "id": "9e8ed979"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "c:\\Users\\pifr8\\AppData\\Local\\Programs\\Python\\Python312\\share\\jupyter\\kernels\\python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}